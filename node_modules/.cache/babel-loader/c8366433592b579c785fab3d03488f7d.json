{"ast":null,"code":"import db from '../json/mime-db.json';\n// console.log('db', db)\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\nvar extensions = Object.create(null);\nvar types = Object.create(null);\nfunction populateMaps(extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana'];\n  Object.keys(db).forEach(function forEachMimeType(type) {\n    var mime = db[type];\n    var exts = mime.extensions;\n    if (!exts || !exts.length) {\n      return;\n    }\n\n    // mime -> extensions\n    extensions[type] = exts;\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i];\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source);\n        var to = preference.indexOf(mime.source);\n        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {\n          // skip the remapping\n          continue;\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type;\n    }\n  });\n}\npopulateMaps(extensions, types);","map":{"version":3,"names":["db","EXTRACT_TYPE_REGEXP","extensions","Object","create","types","populateMaps","preference","undefined","keys","forEach","forEachMimeType","type","mime","exts","length","i","extension","from","indexOf","source","to","substr"],"sources":["/Users/user/develop/study/idontknow/src/common/helpers/mime-types.helpers.js"],"sourcesContent":["import db from '../json/mime-db.json'\n// console.log('db', db)\n\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\n\nconst extensions = Object.create(null)\nconst types = Object.create(null)\n\nfunction populateMaps(extensions, types) {\n    // source preference (least -> most)\n    var preference = ['nginx', 'apache', undefined, 'iana']\n\n    Object.keys(db).forEach(function forEachMimeType(type) {\n        var mime = db[type]\n        var exts = mime.extensions\n\n        if (!exts || !exts.length) {\n            return\n        }\n\n        // mime -> extensions\n        extensions[type] = exts\n\n        // extension -> mime\n        for (var i = 0; i < exts.length; i++) {\n            var extension = exts[i]\n\n            if (types[extension]) {\n                var from = preference.indexOf(db[types[extension]].source)\n                var to = preference.indexOf(mime.source)\n\n                if (types[extension] !== 'application/octet-stream' &&\n                    (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n                    // skip the remapping\n                    continue\n                }\n            }\n\n            // set the extension -> mime\n            types[extension] = type\n        }\n    })\n}\n\npopulateMaps(extensions, types)"],"mappings":"AAAA,OAAOA,EAAE,MAAM,sBAAsB;AACrC;;AAGA,IAAIC,mBAAmB,GAAG,yBAAyB;AAEnD,IAAMC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AACtC,IAAMC,KAAK,GAAGF,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AAEjC,SAASE,YAAY,CAACJ,UAAU,EAAEG,KAAK,EAAE;EACrC;EACA,IAAIE,UAAU,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAEC,SAAS,EAAE,MAAM,CAAC;EAEvDL,MAAM,CAACM,IAAI,CAACT,EAAE,CAAC,CAACU,OAAO,CAAC,SAASC,eAAe,CAACC,IAAI,EAAE;IACnD,IAAIC,IAAI,GAAGb,EAAE,CAACY,IAAI,CAAC;IACnB,IAAIE,IAAI,GAAGD,IAAI,CAACX,UAAU;IAE1B,IAAI,CAACY,IAAI,IAAI,CAACA,IAAI,CAACC,MAAM,EAAE;MACvB;IACJ;;IAEA;IACAb,UAAU,CAACU,IAAI,CAAC,GAAGE,IAAI;;IAEvB;IACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACC,MAAM,EAAEC,CAAC,EAAE,EAAE;MAClC,IAAIC,SAAS,GAAGH,IAAI,CAACE,CAAC,CAAC;MAEvB,IAAIX,KAAK,CAACY,SAAS,CAAC,EAAE;QAClB,IAAIC,IAAI,GAAGX,UAAU,CAACY,OAAO,CAACnB,EAAE,CAACK,KAAK,CAACY,SAAS,CAAC,CAAC,CAACG,MAAM,CAAC;QAC1D,IAAIC,EAAE,GAAGd,UAAU,CAACY,OAAO,CAACN,IAAI,CAACO,MAAM,CAAC;QAExC,IAAIf,KAAK,CAACY,SAAS,CAAC,KAAK,0BAA0B,KAC9CC,IAAI,GAAGG,EAAE,IAAKH,IAAI,KAAKG,EAAE,IAAIhB,KAAK,CAACY,SAAS,CAAC,CAACK,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,cAAe,CAAC,EAAE;UACnF;UACA;QACJ;MACJ;;MAEA;MACAjB,KAAK,CAACY,SAAS,CAAC,GAAGL,IAAI;IAC3B;EACJ,CAAC,CAAC;AACN;AAEAN,YAAY,CAACJ,UAAU,EAAEG,KAAK,CAAC"},"metadata":{},"sourceType":"module"}