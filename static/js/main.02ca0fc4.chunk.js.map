{"version":3,"sources":["ui/components/banner/banner.tsx","views/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Banner","_ref","words","_ref$repeatTime","repeatTime","_ref$wordTime","wordTime","time","_React$useState","React","useState","_React$useState2","Object","slicedToArray","test","_React$useState3","_React$useState4","text","setText","typeWriter","useCallback","i","fnCallback","length","substring","setTimeout","startTextAnimation","array","undefined","useEffect","react_default","a","createElement","className","App","setInterval","window","location","reload","style","padding","height","background","banner_banner","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","views_App"],"mappings":"6LAyDeA,SA/CkB,SAAHC,GAAgE,IAA1DC,EAAKD,EAALC,MAAKC,EAAAF,EAAEG,kBAAU,IAAAD,EAAG,IAASA,EAAAE,EAAAJ,EAAEK,gBAAQ,IAAAD,EAAG,IAAGA,EAAEE,EAAIN,EAAJM,KAAIC,EAC3DC,IAAMC,SAAc,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAxCM,EAAIH,EAAA,GAASI,GAAAJ,EAAA,GACIF,IAAMC,SAAS,KAAGM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAAnCE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEdG,EAAaV,IAAMW,YACrB,SAACH,EAAcI,EAAWC,GAClBD,EAAIJ,EAAKM,QACTL,EAAQD,EAAKO,UAAU,EAAGH,EAAI,IAE9BI,WAAW,WACPN,EAAWF,EAAMI,EAAI,EAAGC,IACzB,MAC0B,oBAAfA,GACdG,WAAWH,EAAYhB,IAG/B,CAACA,IAGCoB,EAAqBjB,IAAMW,YAC7B,SAACC,EAAWM,QACSC,IAAbD,EAAMN,IAINA,EAAIM,EAAMN,GAAGE,QACbJ,EAAWQ,EAAMN,GAAI,EAAG,WACpBK,EAAmBL,EAAI,EAAGM,MAItC,CAACR,EAAYf,IASjB,OANAK,IAAMoB,UAAU,WACZJ,WAAW,WACPC,EAAmB,EAAGxB,IACvBK,IACJ,CAACmB,EAAoBxB,IAGpB4B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eACXnB,EAAMG,EAAKa,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBCpBzBC,EAhBH,WAMV,OALAL,oBAAU,WACRM,YAAY,WACVC,OAAOC,SAASC,UACf,OACH,IAEAR,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACC,QAAS,OAAQC,OAAQ,QAASC,WAAY,cACzDZ,EAAAC,EAAAC,cAACW,EAAM,CAACzC,MAAO,CAAC,8LAChB4B,EAAAC,EAAAC,cAACW,EAAM,CAACzC,MAAO,CAAC,iNAA6CK,KAAM,OACnEuB,EAAAC,EAAAC,cAACW,EAAM,CAACzC,MAAO,CAAC,yOAAiDK,KAAM,MACvEuB,EAAAC,EAAAC,cAACW,EAAM,CAACzC,MAAO,CAAC,yHAAgCK,KAAM,SCb7CqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAhD,GAAiD,IAA9CkD,EAAMlD,EAANkD,OAAQC,EAAMnD,EAANmD,OAAQC,EAAMpD,EAANoD,OAAQC,EAAMrD,EAANqD,OAAQC,EAAOtD,EAAPsD,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCHDW,IAASC,WACpBC,SAASC,eAAe,SAGrBC,OACH9B,EAAAC,EAAAC,cAACF,EAAAC,EAAM8B,WAAU,KACf/B,EAAAC,EAAAC,cAAC8B,EAAG,QAORlB","file":"static/js/main.02ca0fc4.chunk.js","sourcesContent":["import React from 'react';\nimport './banner.css';\n\ninterface IProps {\n    words: string[];\n    repeatTime?: number;\n    wordTime?: number;\n    time?: number\n}\n\nconst Banner: React.FC<IProps> = ({ words, repeatTime = 100000000, wordTime = 700, time }) => {\n    const [test, setTest] = React.useState<any>('')\n    const [text, setText] = React.useState('');\n\n    const typeWriter = React.useCallback(\n        (text: string, i: number, fnCallback: () => void) => {\n            if (i < text.length) {\n                setText(text.substring(0, i + 1));\n                \n                setTimeout(function () {\n                    typeWriter(text, i + 1, fnCallback);\n                }, 100);\n            } else if (typeof fnCallback === 'function') {\n                setTimeout(fnCallback, wordTime);                \n            }\n        },\n        [wordTime]\n    );\n\n    const startTextAnimation = React.useCallback(\n        (i: number, array: string[]) => {\n            if (array[i] === undefined) {\n                return;\n            }\n\n            if (i < array[i].length) {\n                typeWriter(array[i], 0, () => {\n                    startTextAnimation(i + 1, array);\n                });\n            }\n        },\n        [typeWriter, repeatTime]\n    );\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            startTextAnimation(0, words);\n        }, time)\n    }, [startTextAnimation, words]);\n\n    return (\n        <code className='banner-text'>\n            {test}{text}<span className='banner-cursor'/>\n        </code>\n    );\n}\n\nexport default Banner;\n","import React, { useEffect } from \"react\";\nimport { \n  BrowserRouter,\n  Routes,\n  Route,\n  Link,\n  useNavigate,\n  useLocation,\n  Navigate,\n  Outlet,\n} from \"react-router-dom\";\nimport { AppBar } from \"../ui/components/app-bar/app-bar\";\nimport { APP_ROUTES, IAppRoutes } from \"../common/routes/app-routes\";\nimport { Income } from \"./income/income\";\nimport Banner from \"../ui/components/banner/banner\";\n\nconst App = () => {\n  useEffect(() => {\n    setInterval(() => {\n      window.location.reload();\n    }, 18000)\n  },[])\n  return (\n    <div style={{padding: '10px', height: '100vh', background: 'mintcream'}}>\n      <Banner words={['Привіт, маю надію, що в тебе все добре!']}/>\n      <Banner words={['Якщо відчуваеш смуту, бажаю тобі світла!']} time={4500}/>\n      <Banner words={['Впевненного настрою тобі, та доброго вечора!']} time={9000}/>\n      <Banner words={['P.S. - відправив тобі пісню']} time={14000}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './views/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}